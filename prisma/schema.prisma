generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  personaId            String              @id @unique
  name                 String              @unique
  division             Division            @default(Copper)
  divisionRank         Int                 @default(5)
  userStats            UserStats[]
  userGeneratedContent Ugc[]
  ugcBookmarks         UgcBookmark[]
  challengeBookmarks   ChallengeBookmark[]
  kitUnlocks           KitUnlock[]
  tagData              TagData?
  ugcEntries           UgcEntry[]
  challengeEntries     ChallengeEntry[]
}

enum Division {
  Red
  Gold
  Silver
  Bronze
  Copper
}

model ProgressionFlag {
  flag      String      @id @unique
}

model UserStats {
  user   User   @relation(fields: [userId], references: [personaId])
  userId String @id

  stats Json
}

enum UgcType {
  ReachThis
  TimeTrial
}

model Ugc {
  id        String @id @default(cuid())
  createdAt String
  updatedAt String

  name      String
  published Boolean

  levelId Int @default(-1940918635)

  transformX Float
  transformY Float
  transformZ Float

  transformQx Float
  transformQy Float
  transformQz Float
  transformQw Float

  reachThis ReachThis?
  timeTrial TimeTrial?

  ugcEntries UgcEntry[]
  ugcType    UgcType

  creator   User          @relation(fields: [creatorId], references: [personaId])
  creatorId String
  bookmarks UgcBookmark[]
}

model ReachThis {
  id String @id @default(uuid())

  ugc   Ugc    @relation(fields: [ugcId], references: [id], onDelete: Cascade)
  ugcId String @unique

  mapPositionX Float
  mapPositionY Float
  mapPositionZ Float
}

model TimeTrial {
  id String @id @default(uuid())

  ugc   Ugc    @relation(fields: [ugcId], references: [id], onDelete: Cascade)
  ugcId String @unique

  teleportTransformX Float
  teleportTransformY Float
  teleportTransformZ Float

  teleportTransformQx Float
  teleportTransformQy Float
  teleportTransformQz Float
  teleportTransformQw Float
}

model UgcBookmark {
  id           String   @id @default(cuid())
  ugcType      UgcType
  bookmarkTime DateTime @default(now())
  name         String

  ugc   Ugc    @relation(fields: [ugcId], references: [id])
  ugcId String

  user   User   @relation(fields: [userId], references: [personaId])
  userId String
}

model Challenge {
  id            String        @id
  contentId     String
  challengeType ChallengeType

  challengeStats     ChallengeStat[]
  challengeEntries   ChallengeEntry[]
  challengeBookmarks ChallengeBookmark[]
}

model ChallengeStat {
  code String @id

  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String

  entries ChallengeEntry[]
}

model ChallengeEntry {
  challengeStat   ChallengeStat @relation(fields: [challengeStatId], references: [code])
  challengeStatId String

  user   User   @relation(fields: [userId], references: [personaId])
  userId String

  value Int

  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String

  @@id([challengeStatId, userId])
}

enum ChallengeType {
  RunnersRoute
  HackableBillboard
}

model ChallengeBookmark {
  id           String    @id @default(cuid())
  bookmarkTime DateTime  @default(now())
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  String
  user         User      @relation(fields: [userId], references: [personaId])
  userId       String
}

model Kit {
  id              String      @id
  name            String
  kitTypeRelation KitType     @relation(fields: [kitType], references: [id])
  kitType         String
  kitUnlocks      KitUnlock[]
  rewards         Item[]
}

model KitUnlock {
  kit    Kit     @relation(fields: [kitId], references: [id])
  user   User    @relation(fields: [userId], references: [personaId])
  opened Boolean
  kitId  String
  userId String

  @@id([kitId, userId])
}

model KitType {
  id   String @id
  name String
  kits Kit[]
}

model Item {
  id   String @id
  name String
  kits Kit[]
}

model TagData {
  id     String @id @default(cuid())
  frame  String
  bg     String
  detail String
  user   User   @relation(fields: [userId], references: [personaId])
  userId String @unique
}

model UgcEntry {
  ugc   Ugc    @relation(fields: [ugcId], references: [id], onDelete: Cascade)
  ugcId String

  score      String
  finishedAt String

  splitTimes          String[]
  wallrunDistance     String?
  maxperframeDistance String?
  walkDistance        String?
  totalDistance       String?

  user   User   @relation(fields: [userId], references: [personaId])
  userId String

  @@id([ugcId, userId])
}
